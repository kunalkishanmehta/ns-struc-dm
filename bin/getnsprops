#!/usr/bin/python
__doc__ = 'GETNSPROPS -- calculate NS properties as a function of central density for selected EoSs'
__usage__ = 'getnsprops EoS1.csv,EoS2.csv,... [-v] [-p R,M,Lambda,...] [-n 200] [-r 0.8,12] [-d ./eos/] [-o ./dat/]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '03-2019'

import numpy as np
from optparse import OptionParser
from scipy.interpolate import interp1d
from nsstruc.tov import tov
from nsstruc.constants import *
from nsstruc.pltsetup import *

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-p', '--props', default='R,M,Lambda', help='comma-separated list of NS properties to calculate, DEFAULT=R,M,Lambda', metavar='R,M,Lambda')
parser.add_option('-n', '--numrhoc', default=2e2, help='number of central densities to sample per EoS, DEFAULT=200', metavar='2e2')
parser.add_option('-r', '--rhorng', default='0.8,1.2e1', help='comma-separated min and max values for central density in units of rhonuc, DEFAULT=0.8,1.2e1', metavar='0.8,1.2e1')
parser.add_option('-s', '--stpi', default=1e1, help='starting step size for radial TOV integration in cm, DEFAULT=1e1', metavar='1e1')
parser.add_option('-N', '--numpts', default=2e3, help='number of points for radial TOV integration, DEFAULT=2e3', metavar='2e3')
parser.add_option('-m', '--maxr', default=2e6, help='radius endpoint in cm for surface finding algorithm, DEFAULT=2e6', metavar='2e6')
parser.add_option('-T', '--tol', default=1e1, help='pressure tolerance for surface finding algorithm in g/cm^3, DEFAULT=1e1', metavar='1e1')
parser.add_option('-d', '--dir', default='./eos/', help='path to directory housing EoS data, DEFAULT=./eos/', metavar='./eos/')
parser.add_option('-o', '--outdir', default='./dat/', help='path to output directory, DEFAULT=./dat/', metavar='./dat/')
parser.add_option('-t', '--tag', default='macro-', help='tag for output data file, DEFAULT=macro-', metavar='macro-')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')

opts, args = parser.parse_args()
eosnames = str(args[0]).split(',')
props = str(opts.props).split(',')
numprops = len(props)
rhorng = str(opts.rhorng).split(',')
rhoi, rhof = [float(rho) for rho in rhorng]
numrhoc = int(float(opts.numrhoc))
stp = float(opts.stpi)
numpts = int(float(opts.numpts))
maxr = float(opts.maxr)
tol = float(opts.tol)
indir = str(opts.dir)
outdir = str(opts.outdir)
tag = str(opts.tag)
verb = opts.verbose

# CALCULATE NS PROPERTIES FOR EACH EOS

for eosname in eosnames:

	shortname = (eosname.split('.')[0]).split('eos-')[-1]
	if verb == True: print 'Calculate properties of '+str(shortname)+' stars'

	eospath = indir+eosname
	outfile = open(outdir+tag+shortname+".csv","w")
	outfile.write('rhoc,'+','.join(props)+'\n')
	
	eosdat = np.genfromtxt(eospath,names=True,delimiter=',')
	rhodat = eosdat['baryon_density'] # rest-mass energy density in units of g/cm^3
	pdat = eosdat['pressurec2'] # pressure in units of g/cm^3
	mudat = eosdat['energy_densityc2'] # total energy density in units of g/cm^3
	
	rhop = interp1d(pdat,rhodat,kind='linear',bounds_error=False,fill_value=0)
	def Rho(p): return rhop(p)
	
	mup = interp1d(pdat,mudat,kind='linear',bounds_error=False,fill_value=0)
	def mu(p): return mup(p)
		
	prho = interp1d(rhodat,pdat,kind='linear',bounds_error=False,fill_value=0)
	def P(rho): return prho(rho)
		
	cs2pi = interp1d(pdat,np.gradient(mudat,pdat),kind='linear', bounds_error=False, fill_value=0)
	def cs2i(p): return cs2pi(p) # 1/sound speed squared
	
	rhocs = np.linspace(max(rhoi*rhonuc,rhodat[0]),min(rhof*rhonuc,rhodat[-1]),numrhoc)
	
	properties = np.zeros((numrhoc,numprops+1))
	
	i = 0
	if verb == True: print 'Start at central density {0} g/cm^3'.format(rhocs[0])
	for rhoc in rhocs: # compute macroscopic properties for star of each central density
	
		macro = tov([mu,P,cs2i,Rho],rhoc,props,stp,numpts,maxr,tol)
		properties[i] = [item for List in [[rhoc],macro] for item in List]
		i = i+1

	if verb == True: print 'Done at central density {0} g/cm^3\nSave to '.format(rhocs[-1])+outdir+tag+shortname+'.csv'
	np.savetxt(outfile,properties,delimiter=',')
